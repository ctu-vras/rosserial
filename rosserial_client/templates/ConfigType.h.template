${doline} ${linenum} "${filename}"
// *********************************************************
//
// File autogenerated for the ${pkgname} package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __${pkgname}__${uname}CONFIG_H__
#define __${pkgname}__${uname}CONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <any>
#include <memory>
#include <string>

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>

namespace ${pkgname}
{
  class ${configname}ConfigStatics;

  class ${configname}Config
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(const char* n, const char* t, uint32_t l,
          const char* d, const char* e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(${configname}Config &config, const ${configname}Config &max, const ${configname}Config &min) const = 0;
      virtual void calcLevel(uint32_t &level, const ${configname}Config &config1, const ${configname}Config &config2) const = 0;
      virtual void fromServer(const ros::NodeHandleBase_ &nh, ${configname}Config &config, const std::string& ns) const = 0;
      virtual void toServer(const ros::NodeHandleBase_ &nh, const ${configname}Config &config, const std::string& ns) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ${configname}Config &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const ${configname}Config &config) const = 0;
      virtual void getValue(const ${configname}Config &config, std::any &val) const = 0;
    };

    typedef std::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef std::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(const char* a_name, const char* a_type, uint32_t a_level,
          const char* a_description, const char* a_edit_method, T ${configname}Config::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T ${configname}Config::* field;

      virtual void clamp(${configname}Config &config, const ${configname}Config &max, const ${configname}Config &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const ${configname}Config &config1, const ${configname}Config &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandleBase_ &nh, ${configname}Config &config, const std::string& ns) const override
      {
        const auto paramName = ns + "/" + name;
        nh.getParam(paramName.c_str(), config.*field);
      }

      virtual void toServer(const ros::NodeHandleBase_ &nh, const ${configname}Config &config, const std::string& ns) const override
      {
        const auto paramName = ns + "/" + name;
        nh.setParam(paramName.c_str(), config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ${configname}Config &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const ${configname}Config &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const ${configname}Config &config, std::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(const char* n, const char* t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const std::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, std::any &config) const =0;
      virtual void updateParams(std::any &cfg, ${configname}Config &top) const= 0;
      virtual void setInitialState(std::any &cfg) const = 0;


      void convertParams()
      {
        parameters_length = abstract_parameters.size();
        delete[] parameters;
        parameters = new dynamic_reconfigure::ParamDescription[abstract_parameters.size()];
        for(size_t i = 0; i < abstract_parameters.size(); ++i)
          parameters[i] = dynamic_reconfigure::ParamDescription(*abstract_parameters[i]);
      }
    };

    typedef std::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef std::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(const char* a_name, const char* a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters_length = g.parameters_length;
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, std::any &cfg) const override
      {
        PT* config = std::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          std::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(std::any &cfg) const override
      {
        PT* config = std::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          std::any n = std::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(std::any &cfg, ${configname}Config &top) const override
      {
        PT* config = std::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          std::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const std::any &cfg) const override
      {
        const PT config = std::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<${configname}Config::AbstractGroupDescriptionConstPtr> groups;
    };

${groups}


${members}
${doline} ${linenum} "${filename}"

    bool __fromMessage__(const dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          std::any n = std::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        TRACE_ERROR("${configname}Config::__fromMessage__ called with an unexpected parameter.");
        TRACE_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools_length; i++)
          TRACE_ERROR("  %s", msg.bools[i].name);
        TRACE_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints_length; i++)
          TRACE_ERROR("  %s", msg.ints[i].name);
        TRACE_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles_length; i++)
          TRACE_ERROR("  %s", msg.doubles[i].name);
        TRACE_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs_length; i++)
          TRACE_ERROR("  %s", msg.strs[i].name);
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandleBase_ &nh, const std::string& ns) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this, ns);
    }

    void __fromServer__(const ros::NodeHandleBase_ &nh, const std::string& ns)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this, ns);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          std::any n = std::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const ${configname}Config &__max__ = __getMax__();
      const ${configname}Config &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const ${configname}Config &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const ${configname}Config &__getDefault__();
    static const ${configname}Config &__getMax__();
    static const ${configname}Config &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const ${configname}ConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void ${configname}Config::ParamDescription<const char*>::clamp(${configname}Config &config, const ${configname}Config &max, const ${configname}Config &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class ${configname}ConfigStatics
  {
    friend class ${configname}Config;

    ${configname}ConfigStatics()
    {
${paramdescr}
${doline} ${linenum} "${filename}"

      __description_message__.groups_length = __group_descriptions__.size();
      __groups__.resize(__group_descriptions__.size());
      __description_message__.groups = __groups__.data();
      for (size_t i = 0; i < __group_descriptions__.size(); ++i)
      {
        __groups__[i] = *__group_descriptions__[i];
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<${configname}Config::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<${configname}Config::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    ${configname}Config __max__;
    ${configname}Config __min__;
    ${configname}Config __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    std::vector<dynamic_reconfigure::Group> __groups__;

    static const ${configname}ConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static ${configname}ConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &${configname}Config::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const ${configname}Config &${configname}Config::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const ${configname}Config &${configname}Config::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const ${configname}Config &${configname}Config::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<${configname}Config::AbstractParamDescriptionConstPtr> &${configname}Config::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<${configname}Config::AbstractGroupDescriptionConstPtr> &${configname}Config::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const ${configname}ConfigStatics *${configname}Config::__get_statics__()
  {
    const static ${configname}ConfigStatics *statics;

    if (statics) // Common case
      return statics;

    statics = ${configname}ConfigStatics::get_instance();

    return statics;
  }

${constants}
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __${uname}RECONFIGURATOR_H__
